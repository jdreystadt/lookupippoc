// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modws2_32 = windows.NewLazySystemDLL("ws2_32.dll")

	procFreeAddrInfoExW     = modws2_32.NewProc("FreeAddrInfoExW")
	procGetAddrInfoExCancel = modws2_32.NewProc("GetAddrInfoExCancel")
	procGetAddrInfoExW      = modws2_32.NewProc("GetAddrInfoExW")
)

func freeAddrInfoEx(result *addrinfoexW) {
	syscall.Syscall(procFreeAddrInfoExW.Addr(), 1, uintptr(unsafe.Pointer(result)), 0, 0)
	return
}

func getAddrInfoExCancel(ch *handle) (err error) {
	r1, _, e1 := syscall.Syscall(procGetAddrInfoExCancel.Addr(), 1, uintptr(unsafe.Pointer(ch)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func getAddrInfoEx(nodename *uint16, servicename *uint16, dwNameSpace uint32, lpNspId *uint16, hints *addrinfoexW, result **addrinfoexW, timeout uint32, o *overlapped, cr *uint16, ch *handle) (err error) {
	r1, _, e1 := syscall.Syscall12(procGetAddrInfoExW.Addr(), 10, uintptr(unsafe.Pointer(nodename)), uintptr(unsafe.Pointer(servicename)), uintptr(dwNameSpace), uintptr(unsafe.Pointer(lpNspId)), uintptr(unsafe.Pointer(hints)), uintptr(unsafe.Pointer(result)), uintptr(timeout), uintptr(unsafe.Pointer(o)), uintptr(unsafe.Pointer(cr)), uintptr(unsafe.Pointer(ch)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
